package com.devs.TechTraking.service;

import com.devs.TechTraking.model.Revision;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import org.springframework.stereotype.Service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.*;

@Service
public class InformeService {

    public ByteArrayInputStream generarReporte(Revision revision) {
        Document document = new Document();
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        try {
            PdfWriter.getInstance(document, out);
            document.open();

            // üìå T√≠tulo
            Font titleFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 20);
            Paragraph title = new Paragraph("Informe de Revisi√≥n", titleFont);
            title.setAlignment(Element.ALIGN_CENTER);
            document.add(title);
            document.add(Chunk.NEWLINE);

            // üìå Datos generales
            document.add(new Paragraph("Cliente ID: " + revision.getCliente()));
            document.add(new Paragraph("Equipo ID: " + revision.getEquipo()));
            document.add(new Paragraph("Fecha de Revisi√≥n: " + revision.getFecha()));
            document.add(Chunk.NEWLINE);

            // üìå Configuraci√≥n
            Font sectionFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 14);
            Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD, 12);

            Map<String, Boolean> criterios = getCriterios();
            Map<String, String> preguntas = getPreguntas();
            Map<String, Boolean> respuestas = RevisionMapperUtil.toMap(revision);

            // üìå Diccionario de observaciones autom√°ticas
            Map<String, String> observacionesAuto = getObservacionesAuto();

            // üìå Definici√≥n de secciones
            Map<String, String[]> secciones = Map.of(
                    "Estado General", new String[]{"equipoEnciende", "estaOperando", "estaPartido", "estaManchado"},
                    "Piezas Faltantes", new String[]{"tornillos", "tapas", "display", "tarjetasElectronicas", "botones", "cabezal"},
                    "Parte Mec√°nica", new String[]{"oxido", "ruidos", "pi√±oneriaEnBuenEstado", "correasEnBuenEstado"},
                    "Pantalla", new String[]{"funciona", "partida", "lineasQuemadas", "quemada"},
                    "Cabezal de Impresi√≥n", new String[]{"bueno", "lineasBlancas", "calibrado", "limpio"},
                    "Rodillo de Impresi√≥n", new String[]{"buenos", "picados", "rayados", "adhesivo"},
                    "Estado Electr√≥nico", new String[]{"humedad", "tarjetaElectronica"}
            );

            boolean hayNegativas = false;

            // üìå Recorremos secciones
            for (Map.Entry<String, String[]> seccion : secciones.entrySet()) {
                String nombreSeccion = seccion.getKey();
                String[] campos = seccion.getValue();

                // T√≠tulo de la secci√≥n
                Paragraph secTitle = new Paragraph(nombreSeccion, sectionFont);
                secTitle.setSpacingBefore(10);
                secTitle.setSpacingAfter(5);
                document.add(secTitle);

                // Tabla con 2 columnas
                PdfPTable table = new PdfPTable(2);
                table.setWidthPercentage(100);
                table.setSpacingBefore(5);

                // Encabezados
                PdfPCell cell1 = new PdfPCell(new Phrase("Pregunta", headerFont));
                cell1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                table.addCell(cell1);

                PdfPCell cell2 = new PdfPCell(new Phrase("Resultado", headerFont));
                cell2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                table.addCell(cell2);

                boolean seccionTieneNegativas = false;

                for (String campo : campos) {
                    Boolean valor = respuestas.get(campo);
                    Boolean esperado = criterios.get(campo);

                    if (valor != null && esperado != null) {
                        if (!valor.equals(esperado)) { // ‚ùå Negativo
                            hayNegativas = true;
                            seccionTieneNegativas = true;

                            table.addCell(preguntas.get(campo));

                            // üìå Mostrar ‚ùå + observaci√≥n autom√°tica dentro de la tabla
                            String resultado = "‚ùå";
                            if (observacionesAuto.containsKey(campo)) {
                                resultado += " " + observacionesAuto.get(campo);
                            }
                            table.addCell(resultado);
                        }
                    }
                }

                if (!seccionTieneNegativas) {
                    PdfPCell cell = new PdfPCell(new Phrase("‚úÖ Sin observaciones negativas en esta secci√≥n"));
                    cell.setColspan(2);
                    cell.setHorizontalAlignment(Element.ALIGN_CENTER);
                    table.addCell(cell);
                }

                document.add(table);
            }

            if (!hayNegativas) {
                Paragraph ok = new Paragraph("‚úÖ El equipo pas√≥ todas las verificaciones sin observaciones negativas", sectionFont);
                ok.setSpacingBefore(15);
                document.add(ok);
            }

            document.add(Chunk.NEWLINE);

            // üìå Observaciones manuales
            document.add(new Paragraph("Observaciones del t√©cnico:", sectionFont));
            document.add(new Paragraph(revision.getObservaciones()));

            document.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        return new ByteArrayInputStream(out.toByteArray());
    }

    // üìå Diccionario de observaciones autom√°ticas
    private Map<String, String> getObservacionesAuto() {
        return Map.ofEntries(
                // Estado General
                Map.entry("equipoEnciende", "El equipo no enciende, revisar fuente de alimentaci√≥n."),
                Map.entry("estaOperando", "El equipo no est√° operando correctamente."),
                Map.entry("estaPartido", "El equipo presenta da√±os estructurales (partido)."),
                Map.entry("estaManchado", "El equipo presenta manchas o suciedad visible."),

                // Piezas Faltantes
                Map.entry("tornillos", "Faltan tornillos, riesgo de fijaci√≥n inadecuada."),
                Map.entry("tapas", "Faltan tapas, riesgo de exposici√≥n de componentes."),
                Map.entry("display", "El display no funciona correctamente."),
                Map.entry("tarjetasElectronicas", "Faltan tarjetas electr√≥nicas, revisar integridad del sistema."),
                Map.entry("botones", "Botones en mal estado o faltantes."),
                Map.entry("cabezal", "Cabezal ausente o defectuoso."),

                // Parte Mec√°nica
                Map.entry("oxido", "Se encontr√≥ √≥xido en la estructura."),
                Map.entry("ruidos", "Se detectaron ruidos anormales en la operaci√≥n."),
                Map.entry("pi√±oneriaEnBuenEstado", "La pi√±oner√≠a presenta desgaste."),
                Map.entry("correasEnBuenEstado", "Las correas presentan desgaste o roturas."),

                // Pantalla
                Map.entry("funciona", "La pantalla no enciende."),
                Map.entry("partida", "La pantalla est√° partida."),
                Map.entry("lineasQuemadas", "Se observan l√≠neas quemadas en la pantalla."),
                Map.entry("quemada", "La pantalla est√° completamente quemada."),

                // Cabezal de Impresi√≥n
                Map.entry("bueno", "El cabezal de impresi√≥n no est√° en buen estado."),
                Map.entry("lineasBlancas", "Se observan l√≠neas blancas en las impresiones."),
                Map.entry("calibrado", "El cabezal no est√° calibrado."),
                Map.entry("limpio", "El cabezal no est√° limpio."),

                // Rodillo de Impresi√≥n
                Map.entry("buenos", "Los rodillos no est√°n en buen estado."),
                Map.entry("picados", "Los rodillos presentan picaduras."),
                Map.entry("rayados", "Los rodillos est√°n rayados."),
                Map.entry("adhesivo", "Exceso de adhesivo en los rodillos."),

                // Estado Electr√≥nico
                Map.entry("humedad", "Se detect√≥ humedad en el sistema, riesgo el√©ctrico."),
                Map.entry("tarjetaElectronica", "La tarjeta electr√≥nica no responde correctamente.")
        );
    }

    // üìå Map con preguntas legibles
    private Map<String, String> getPreguntas() {
        return Map.ofEntries(
                Map.entry("equipoEnciende", "¬øEl equipo enciende?"),
                Map.entry("estaOperando", "¬øEl equipo est√° operando?"),
                Map.entry("estaPartido", "¬øEl equipo est√° partido?"),
                Map.entry("estaManchado", "¬øEl equipo est√° manchado?"),
                Map.entry("tornillos", "¬øFaltan tornillos?"),
                Map.entry("tapas", "¬øFaltan tapas?"),
                Map.entry("display", "¬øEl display funciona?"),
                Map.entry("tarjetasElectronicas", "¬øFaltan tarjetas electr√≥nicas?"),
                Map.entry("botones", "¬øLos botones funcionan?"),
                Map.entry("cabezal", "¬øEl cabezal est√° presente y en buen estado?"),
                Map.entry("oxido", "¬øPresenta √≥xido?"),
                Map.entry("ruidos", "¬øPresenta ruidos anormales?"),
                Map.entry("pi√±oneriaEnBuenEstado", "¬øLa pi√±oner√≠a est√° en buen estado?"),
                Map.entry("correasEnBuenEstado", "¬øLas correas est√°n en buen estado?"),
                Map.entry("funciona", "¬øLa pantalla funciona?"),
                Map.entry("partida", "¬øLa pantalla est√° partida?"),
                Map.entry("lineasQuemadas", "¬øLa pantalla tiene l√≠neas quemadas?"),
                Map.entry("quemada", "¬øLa pantalla est√° quemada?"),
                Map.entry("bueno", "¬øEl cabezal est√° en buen estado?"),
                Map.entry("lineasBlancas", "¬øEl cabezal tiene l√≠neas blancas?"),
                Map.entry("calibrado", "¬øEl cabezal est√° calibrado?"),
                Map.entry("limpio", "¬øEl cabezal est√° limpio?"),
                Map.entry("buenos", "¬øLos rodillos est√°n en buen estado?"),
                Map.entry("picados", "¬øLos rodillos est√°n picados?"),
                Map.entry("rayados", "¬øLos rodillos est√°n rayados?"),
                Map.entry("adhesivo", "¬øHay exceso de adhesivo en los rodillos?"),
                Map.entry("humedad", "¬øSe detecta humedad en el sistema?"),
                Map.entry("tarjetaElectronica", "¬øLa tarjeta electr√≥nica funciona correctamente?")
        );
    }

    // üìå Valores esperados (true = positivo, false = negativo)
    private Map<String, Boolean> getCriterios() {
        return Map.ofEntries(
                // Estado General
                Map.entry("equipoEnciende", true),
                Map.entry("estaOperando", true),
                Map.entry("estaPartido", false),
                Map.entry("estaManchado", false),

                // Piezas Faltantes
                Map.entry("tornillos", false),
                Map.entry("tapas", false),
                Map.entry("display", true),
                Map.entry("tarjetasElectronicas", false),
                Map.entry("botones", true),
                Map.entry("cabezal", true),

                // Parte Mec√°nica
                Map.entry("oxido", false),
                Map.entry("ruidos", false),
                Map.entry("pi√±oneriaEnBuenEstado", true),
                Map.entry("correasEnBuenEstado", true),

                // Pantalla
                Map.entry("funciona", true),
                Map.entry("partida", false),
                Map.entry("lineasQuemadas", false),
                Map.entry("quemada", false),

                // Cabezal de Impresi√≥n
                Map.entry("bueno", true),
                Map.entry("lineasBlancas", false),
                Map.entry("calibrado", true),
                Map.entry("limpio", true),

                // Rodillo de Impresi√≥n
                Map.entry("buenos", true),
                Map.entry("picados", false),
                Map.entry("rayados", false),
                Map.entry("adhesivo", false),

                // Estado Electr√≥nico
                Map.entry("humedad", false),
                Map.entry("tarjetaElectronica", true)
        );
    }

    // üìå Mapper utilitario
    public static class RevisionMapperUtil {
        public static Map<String, Boolean> toMap(Revision revision) {
            return Map.ofEntries(
                    Map.entry("equipoEnciende", revision.isEquipoEnciende()),
                    Map.entry("estaOperando", revision.isEstaOperando()),
                    Map.entry("estaPartido", revision.isEstaPartido()),
                    Map.entry("estaManchado", revision.isEstaManchado()),
                    Map.entry("tornillos", revision.isTornillos()),
                    Map.entry("tapas", revision.isTapas()),
                    Map.entry("display", revision.isDisplay()),
                    Map.entry("tarjetasElectronicas", revision.isTarjetasElectronicas()),
                    Map.entry("botones", revision.isBotones()),
                    Map.entry("cabezal", revision.isCabezal()),
                    Map.entry("oxido", revision.isOxido()),
                    Map.entry("ruidos", revision.isRuidos()),
                    Map.entry("pi√±oneriaEnBuenEstado", revision.isPi√±oneriaEnBuenEstado()),
                    Map.entry("correasEnBuenEstado", revision.isCorreasEnBuenEstado()),
                    Map.entry("funciona", revision.isFunciona()),
                    Map.entry("partida", revision.isPartida()),
                    Map.entry("lineasQuemadas", revision.isLineasQuemadas()),
                    Map.entry("quemada", revision.isQuemada()),
                    Map.entry("bueno", revision.isBueno()),
                    Map.entry("lineasBlancas", revision.isLineasBlancas()),
                    Map.entry("calibrado", revision.isCalibrado()),
                    Map.entry("limpio", revision.isLimpio()),
                    Map.entry("buenos", revision.isBuenos()),
                    Map.entry("picados", revision.isPicados()),
                    Map.entry("rayados", revision.isRayados()),
                    Map.entry("adhesivo", revision.isAdhesivo()),
                    Map.entry("humedad", revision.isHumedad()),
                    Map.entry("tarjetaElectronica", revision.isTarjetaElectronica())
            );
        }
    }
}
